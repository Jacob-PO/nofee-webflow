// ü§ñ ÎÖ∏Ìîº AI ÏÉÅÎã¥ ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏ - GitHub Í¥ÄÎ¶¨Ïö©
(function() {
    'use strict';
    
    // üéØ Ï†ÑÏó≠ ÏÉÅÌÉú Í¥ÄÎ¶¨
    const state = {
        // Ï±óÎ¥á ÏÉÅÌÉú
        chatContainer: null,
        states: ['askPrice', 'askBrand', 'askProduct', 'askName', 'askPhone', 'askRegion', 'askCity', 'complete', 'askConsent'],
        stateIndex: 0,
        consentGiven: false,
        hasPreSelectedProduct: false,
        
        // ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞
        userData: {
            name: '',
            phone: '',
            region: '',
            city: '',
            consent: ''
        },
        
        // ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞
        selectedProduct: {},
        filteredProducts: [],
        selectedPriceRange: {},
        selectedBrand: '',
        products: [],
        regionToCity: {}
    };
    
    // GitHub Ï†ÄÏû•ÏÜå ÏÑ§Ï†ï
    const GITHUB_BASE_URL = 'https://jacob-po.github.io/nofee-webflow';
    // products.jsonÏù¥ Í∞ôÏùÄ Ï†ÄÏû•ÏÜåÏóê ÏûàÎäî Í≤ΩÏö∞:
    const PRODUCTS_DATA_URL = `${GITHUB_BASE_URL}/data/products.json`;
    const REGIONS_DATA_URL = `${GITHUB_BASE_URL}/data/regions.json`;
    // Ïô∏Î∂Ä Ï†ÄÏû•ÏÜåÎ•º ÏÇ¨Ïö©ÌïòÎ†§Î©¥ ÏïÑÎûò Ï£ºÏÑùÏùÑ Ìï¥Ï†úÌïòÍ≥† ÏúÑ Ï§ÑÏùÑ Ï£ºÏÑù Ï≤òÎ¶¨:
    // const PRODUCTS_DATA_URL = 'https://jacob-po.github.io/products-data/products.json';
    // const REGIONS_DATA_URL = 'https://raw.githubusercontent.com/Jacob-PO/products-data/main/regions.json';
    
    // üé® Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
    const utils = {
        formatPrice: (value) => {
            return Number(value).toLocaleString("ko-KR");
        },
        
        debounce: (func, wait) => {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },
        
        sanitizeInput: (input) => {
            return input.trim().replace(/<[^>]*>?/gm, '');
        },
        
        validatePhone: (phone) => {
            const phoneRegex = /^01[0-9]{8,9}$/;
            return phoneRegex.test(phone.replace(/-/g, ''));
        }
    };
    
    // ü§ñ AI Ïï†ÎãàÎ©îÏù¥ÏÖò Ìï®ÏàòÎì§
    const animations = {
        showGreeting: () => {
            chatUI.addBotMessage("ÏïàÎÖïÌïòÏÑ∏Ïöî Í≥†Í∞ùÎãò! Ï†ÄÎäî AI ÏÉÅÎã¥ÏõêÏûÖÎãàÎã§.", 5);
        },
        
        showAIThinking: async (text = "AIÍ∞Ä ÎßûÏ∂§ ÏÉÅÌíàÏùÑ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§") => {
            const thinking = document.createElement('div');
            thinking.className = 'ai-thinking';
            thinking.innerHTML = `
                <div class="ai-dots">
                    <div class="ai-dot"></div>
                    <div class="ai-dot"></div>
                    <div class="ai-dot"></div>
                </div>
                <div class="ai-thinking-text">${text}...</div>
            `;
            state.chatContainer.appendChild(thinking);
            state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
            
            return new Promise(resolve => {
                setTimeout(() => {
                    thinking.remove();
                    resolve();
                }, 800);
            });
        },
        
        showLoader: (callback) => {
            setTimeout(callback, 100);
        }
    };
    
    // üí¨ Ï±ÑÌåÖ UI Ìï®ÏàòÎì§
    const chatUI = {
        addBotMessage: (msg, delay = 5) => {
            const div = document.createElement('div');
            div.className = 'chat-bubble bot';
            state.chatContainer.appendChild(div);
            
            let i = 0;
            function typeChar() {
                if (i <= msg.length) {
                    div.innerText = msg.slice(0, i++);
                    setTimeout(typeChar, delay);
                } else {
                    state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
                }
            }
            typeChar();
        },
        
        addUserMessage: (msg) => {
            const div = document.createElement('div');
            div.className = 'chat-bubble user';
            div.innerText = msg;
            state.chatContainer.appendChild(div);
            state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
        },
        
        createBackButton: () => {
            const back = document.createElement('button');
            back.className = 'chat-back';
            back.textContent = '‚Üê Ïù¥Ï†ÑÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞';
            back.onclick = () => {
                if (state.stateIndex > 0) {
                    state.stateIndex--;
                    const inputEls = state.chatContainer.querySelectorAll('.chat-input, .chat-bubble.user');
                    if (inputEls.length) {
                        inputEls[inputEls.length - 1].remove();
                    }
                    chatFlow.nextStep();
                }
            };
            return back;
        },
        
        showButtons: (labels, callback, showBack = true) => {
            animations.showLoader(() => {
                const wrapper = document.createElement('div');
                wrapper.className = 'chat-input';
                
                labels.forEach(label => {
                    const btn = document.createElement('button');
                    btn.innerText = label;
                    btn.onclick = () => {
                        wrapper.remove();
                        chatUI.addUserMessage(label);
                        callback(label);
                    };
                    wrapper.appendChild(btn);
                });
                
                if (showBack && !state.hasPreSelectedProduct) {
                    wrapper.appendChild(chatUI.createBackButton());
                }
                
                state.chatContainer.appendChild(wrapper);
                state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
            });
        },
        
        showInput: (type, options = [], showBack = true) => {
            animations.showLoader(() => {
                const wrapper = document.createElement('div');
                wrapper.className = 'chat-input';
                
                if (type === 'select') {
                    const select = document.createElement('select');
                    select.innerHTML = '<option value="">ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</option>' + 
                        options.map(opt => `<option value="${opt}">${opt}</option>`).join('');
                    
                    select.onchange = () => {
                        if (select.value) {
                            wrapper.remove();
                            chatFlow.proceed(select.value);
                        }
                    };
                    wrapper.appendChild(select);
                } else {
                    const input = document.createElement('input');
                    input.placeholder = type === 'phone' ? '01012345678' : 'ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                    if (type === 'phone') {
                        input.type = 'tel';
                        input.maxLength = 11;
                    }
                    
                    wrapper.appendChild(input);
                    
                    const btn = document.createElement('button');
                    btn.textContent = 'ÏûÖÎ†•';
                    btn.onclick = () => {
                        const value = utils.sanitizeInput(input.value);
                        
                        if (type === 'phone' && !utils.validatePhone(value)) {
                            input.style.borderColor = '#ff4444';
                            input.placeholder = 'Ïò¨Î∞îÎ•∏ Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                            return;
                        }
                        
                        if (value) {
                            wrapper.remove();
                            chatFlow.proceed(value);
                        }
                    };
                    wrapper.appendChild(btn);
                    
                    // Enter ÌÇ§ ÏßÄÏõê
                    input.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter') {
                            btn.click();
                        }
                    });
                }
                
                if (showBack && !state.hasPreSelectedProduct) {
                    wrapper.appendChild(chatUI.createBackButton());
                }
                
                state.chatContainer.appendChild(wrapper);
                state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
                
                // ÏûêÎèô Ìè¨Ïª§Ïä§
                const focusEl = wrapper.querySelector('input, select');
                if (focusEl) {
                    setTimeout(() => focusEl.focus(), 100);
                }
            });
        }
    };
    
    // üîÑ Ï±ÑÌåÖ ÌîåÎ°úÏö∞ Í¥ÄÎ¶¨
    const chatFlow = {
        askPrice: async () => {
            await animations.showAIThinking("ÏöîÍ∏àÎåÄ Î∂ÑÏÑù Ï§ë");
            chatUI.addBotMessage("ÎÖ∏ÌîºÏóêÏÑú Ïõî ÏöîÍ∏àÎåÄÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏÉÅÌíàÏùÑ Ï∂îÏ≤úÎìúÎ¶¥Í≤åÏöî.\nÏÑ†Ìò∏ÌïòÏãúÎäî ÏöîÍ∏àÎåÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            
            const ranges = [
                { label: '3~5Îßå Ïõê', min: 30000, max: 50000 },
                { label: '5~7Îßå Ïõê', min: 50000, max: 70000 },
                { label: '7~9Îßå Ïõê', min: 70000, max: 90000 },
                { label: '9~10Îßå Ïõê', min: 90000, max: 100000 },
                { label: '10Îßå Ïõê Ïù¥ÏÉÅ', min: 100000, max: Infinity }
            ];
            
            chatUI.showButtons(ranges.map(r => r.label), (label) => {
                const range = ranges.find(r => r.label === label);
                state.selectedPriceRange = range;
                state.filteredProducts = state.products.filter(p => 
                    +p.total >= range.min && +p.total < range.max
                );
                
                dataManager.updateUrlParams();
                state.stateIndex++;
                chatFlow.nextStep();
            }, false);
        },
        
        askBrand: async () => {
            await animations.showAIThinking("Î∏åÎûúÎìú Îß§Ïπ≠ Ï§ë");
            
            if (state.filteredProducts.length === 0) {
                chatUI.addBotMessage("ÏÑ†ÌÉùÌïòÏã† Í∞ÄÍ≤©ÎåÄÏóê ÎßûÎäî ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.\nÎã§Î•∏ Í∞ÄÍ≤©ÎåÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
                state.stateIndex = 0;
                chatFlow.nextStep();
                return;
            }
            
            chatUI.addBotMessage("Ïñ¥Îäê Î∏åÎûúÎìúÎ•º ÏõêÌïòÏãúÎÇòÏöî?\nÍ≥†Í∞ùÎãòÏùò ÏÑ†ÌÉùÏùÑ Í∏∞Îã§Î¶¨Í≥† ÏûàÏñ¥Ïöî.");
            const brands = [...new Set(state.filteredProducts.map(p => p.brand))];
            
            chatUI.showButtons(brands, (brand) => {
                state.selectedBrand = brand;
                state.filteredProducts = state.filteredProducts.filter(p => p.brand === brand);
                dataManager.updateUrlParams();
                state.stateIndex++;
                chatFlow.nextStep();
            });
        },
        
        askProduct: async () => {
            await animations.showAIThinking("ÏµúÏ†Å ÏÉÅÌíà Ï∂îÏ≤ú Ï§ë");
            
            if (state.filteredProducts.length === 0) {
                chatUI.addBotMessage("Ï°∞Í±¥Ïóê ÎßûÎäî ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.\nÏ≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
                state.stateIndex = 0;
                state.filteredProducts = [];
                chatFlow.nextStep();
                return;
            }
            
            chatUI.addBotMessage("Ï∂îÏ≤úÎìúÎ¶¥ Ïàò ÏûàÎäî ÏÉÅÌíà Î™©Î°ùÏù¥ÏóêÏöî.\nÏõêÌïòÏãúÎäî Î™®Îç∏ÏùÑ Í≥®ÎùºÏ£ºÏÑ∏Ïöî.");
            
            animations.showLoader(() => {
                const wrapper = document.createElement('div');
                wrapper.className = 'chat-input';
                
                state.filteredProducts.slice(0, 5).forEach(p => {
                    const btn = document.createElement('button');
                    btn.innerHTML = `
                        <strong style="font-size:16px;">${p.model}</strong><br/>
                        <span style="font-size:13px; opacity:0.7;">${p.carrier} ¬∑ ${p.type} ¬∑ ${p.support}</span><br/>
                        <span style="color:#00ff88;font-weight:700;">Ïõî ‚Ç©${utils.formatPrice(p.total)}</span>
                    `;
                    btn.onclick = () => {
                        wrapper.remove();
                        state.selectedProduct = { ...p };
                        chatUI.addUserMessage(`${p.model} ÏÑ†ÌÉù`);
                        dataManager.saveViewedProduct(p);
                        dataManager.updateUrlParams();
                        state.stateIndex++;
                        chatFlow.nextStep();
                    };
                    wrapper.appendChild(btn);
                });
                
                if (!state.hasPreSelectedProduct) {
                    wrapper.appendChild(chatUI.createBackButton());
                }
                
                state.chatContainer.appendChild(wrapper);
                state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
            });
        },
        
        askName: async () => {
            await animations.showAIThinking("Ï†ïÎ≥¥ ÏûÖÎ†• Ï§ÄÎπÑ");
            chatUI.addBotMessage("ÏÑ±Ìï®ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏã§ Ïàò ÏûàÏùÑÍπåÏöî?");
            chatUI.showInput('text');
        },
        
        askPhone: async () => {
            await animations.showAIThinking("Ïó∞ÎùΩÏ≤ò ÏûÖÎ†• Ï§ÄÎπÑ");
            chatUI.addBotMessage("Ïó∞ÎùΩ Í∞ÄÎä•Ìïú Ï†ÑÌôîÎ≤àÌò∏Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî.\n('-' ÏóÜÏù¥ Ïà´ÏûêÎßå ÏûÖÎ†•)");
            chatUI.showInput('phone');
        },
        
        askRegion: async () => {
            await animations.showAIThinking("ÏßÄÏó≠ Ï†ïÎ≥¥ ÌôïÏù∏");
            chatUI.addBotMessage("Í±∞Ï£º Ï§ëÏù¥Ïã† Ïãú(ÎèÑ)Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            chatUI.showInput('select', Object.keys(state.regionToCity));
        },
        
        askCity: async () => {
            await animations.showAIThinking("ÏÑ∏Î∂Ä ÏßÄÏó≠ ÌôïÏù∏");
            chatUI.addBotMessage("Íµ∞/Íµ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            chatUI.showInput('select', state.regionToCity[state.userData.region] || []);
        },
        
        complete: async () => {
            await animations.showAIThinking("Ï†ïÎ≥¥ Í≤ÄÏ¶ù Ï§ë");
            chatUI.addBotMessage("ÏûÖÎ†•Ìï¥Ï£ºÏã† Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌñàÏäµÎãàÎã§.\nÏïÑÎûò ÏïàÎÇ¥Î•º ÎßàÏßÄÎßâÏúºÎ°ú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
            dataManager.fillWebflowFields();
            state.stateIndex++;
            setTimeout(chatFlow.nextStep, 200);
        },
        
        askConsent: () => {
            chatFlow.showConsent();
        },
        
        proceed: (input) => {
            const current = state.states[state.stateIndex];
            chatUI.addUserMessage(input);
            
            switch (current) {
                case 'askName':
                    state.userData.name = input;
                    break;
                case 'askPhone':
                    state.userData.phone = input;
                    break;
                case 'askRegion':
                    state.userData.region = input;
                    break;
                case 'askCity':
                    state.userData.city = input;
                    break;
            }
            
            dataManager.updateUrlParams();
            state.stateIndex++;
            chatFlow.nextStep();
        },
        
        nextStep: async () => {
            const current = state.states[state.stateIndex];
            
            try {
                if (typeof chatFlow[current] === 'function') {
                    await chatFlow[current]();
                }
            } catch (error) {
                console.error('Ï±ÑÌåÖ ÌîåÎ°úÏö∞ Ïò§Î•ò:', error);
                chatUI.addBotMessage("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
            }
        },
        
        showConsent: () => {
            chatUI.addBotMessage("Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎèôÏùòÌïòÏã≠ÎãàÍπå?");
            
            setTimeout(() => {
                const wrapper = document.createElement('div');
                wrapper.className = 'chat-input';
                
                const link = document.createElement('a');
                link.href = "/policy";
                link.textContent = "Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® Î≥¥Í∏∞";
                link.style.cssText = "color: #00ff88; font-size: 14px; display:block; margin-bottom:8px; text-decoration: underline;";
                link.onclick = (e) => {
                    e.preventDefault();
                    window.open("/policy", '_blank');
                };
                wrapper.appendChild(link);
                
                const agree = document.createElement('button');
                agree.textContent = "ÎèôÏùò";
                agree.onclick = async () => {
                    wrapper.remove();
                    state.consentGiven = true;
                    state.userData.consent = "ÎèôÏùòÌï®";
                    chatUI.addUserMessage("ÎèôÏùò");
                    
                    await animations.showAIThinking("Ïã†Ï≤≠ Ï†ëÏàò Ï§ë");
                    chatUI.addBotMessage("Í∞êÏÇ¨Ìï©ÎãàÎã§. Ïã†Ï≤≠ÏùÑ Ï†ëÏàò Ï§ëÏûÖÎãàÎã§.");
                    
                    dataManager.fillWebflowFields();
                    formSubmit.submitForm();
                };
                wrapper.appendChild(agree);
                
                const disagree = document.createElement('button');
                disagree.textContent = "ÎπÑÎèôÏùò";
                disagree.onclick = () => {
                    wrapper.remove();
                    chatUI.addUserMessage("ÎπÑÎèôÏùò");
                    chatUI.addBotMessage("Ïù¥ ÌéòÏù¥ÏßÄÎ•º ÎÇòÍ∞ÄÏãúÍ≤†Ïñ¥Ïöî?");
                    chatUI.showButtons(["ÎÑ§", "ÏïÑÎãàÏöî"], (ans) => {
                        if (ans === "ÎÑ§") {
                            window.location.href = "/";
                        } else {
                            chatFlow.showConsent();
                        }
                    }, false);
                };
                wrapper.appendChild(disagree);
                
                if (!state.hasPreSelectedProduct) {
                    wrapper.appendChild(chatUI.createBackButton());
                }
                
                state.chatContainer.appendChild(wrapper);
                state.chatContainer.scrollTop = state.chatContainer.scrollHeight;
            }, 150);
        },
        
        showProductInfo: (product) => {
            setTimeout(() => {
                chatUI.addBotMessage(
                    `ÏÑ†ÌÉùÌïòÏã† ÏÉÅÌíà Ï†ïÎ≥¥ÏûÖÎãàÎã§.\n\n` +
                    `üì± ${product.model}\n` +
                    `üì° ${product.carrier} ¬∑ ${product.type} ¬∑ ${product.support}\n` +
                    `üí∞ Ïõî ${utils.formatPrice(product.total)}Ïõê\n\n` +
                    `Ìï¥Îãπ ÏÉÅÌíàÏùÑ Ïã†Ï≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`
                );
                
                setTimeout(() => {
                    chatUI.showButtons(['Ïòà', 'ÏïÑÎãàÏöî'], (answer) => {
                        if (answer === 'Ïòà') {
                            state.stateIndex = state.states.indexOf('askName');
                            chatFlow.nextStep();
                        } else {
                            chatUI.addBotMessage("Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§.");
                            setTimeout(() => {
                                window.location.href = '/';
                            }, 800);
                        }
                    }, false);
                }, 500);
            }, 200);
        }
    };
    
    // üìä Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨
    const dataManager = {
        saveViewedProduct: (product) => {
            try {
                const history = JSON.parse(localStorage.getItem('viewedProducts') || '[]');
                history.unshift({ ...product, time: Date.now() });
                
                // Ï§ëÎ≥µ Ï†úÍ±∞
                const unique = history.filter((v, i, arr) =>
                    i === arr.findIndex(o =>
                        o.model === v.model &&
                        o.carrier === v.carrier &&
                        o.type === v.type &&
                        o.support === v.support
                    )
                );
                
                localStorage.setItem('viewedProducts', JSON.stringify(unique.slice(0, 10)));
            } catch (e) {
                console.log('localStorage not available');
            }
        },
        
        updateUrlParams: () => {
            const params = new URLSearchParams();
            
            if (state.selectedPriceRange.min !== undefined) {
                params.set("price_range", `${state.selectedPriceRange.min}-${state.selectedPriceRange.max}`);
            }
            if (state.selectedBrand) params.set("brand", state.selectedBrand);
            
            Object.entries(state.selectedProduct).forEach(([k, v]) => {
                if (v) params.set(k, v);
            });
            
            Object.entries(state.userData).forEach(([k, v]) => {
                if (v) params.set(k, v);
            });
            
            params.set("consent", state.consentGiven ? "yes" : "no");
            
            history.replaceState(null, '', `${location.pathname}?${params.toString()}`);
        },
        
        fillWebflowFields: () => {
            const fields = {
                name: state.userData.name,
                phone: state.userData.phone,
                region: state.userData.region,
                city: state.userData.city,
                consent: state.consentGiven ? "ÎèôÏùòÌï®" : "ÎπÑÎèôÏùò",
                ...state.selectedProduct
            };
            
            console.log('Webflow ÌïÑÎìú Ï±ÑÏö∞Í∏∞:', fields);
            
            // ÏùºÎ∞ò ÌïÑÎìú Ï±ÑÏö∞Í∏∞
            Object.entries(fields).forEach(([key, value]) => {
                const field = document.getElementById(key) || 
                            document.querySelector(`input[name="${key}"]`);
                if (field && value !== undefined && value !== null) {
                    field.value = value;
                    console.log(`${key} ÌïÑÎìúÏóê Í∞í ÏÑ§Ï†ï:`, value);
                    
                    // Change Ïù¥Î≤§Ìä∏ Î∞úÏÉù
                    const event = new Event('change', { bubbles: true });
                    field.dispatchEvent(event);
                }
            });
            
            // Apply Ìèº ÌïÑÎìúÎèÑ Ï±ÑÏö∞Í∏∞
            const applyForm = document.querySelector('form[name="apply"]') || 
                            document.querySelector('form#apply');
            if (applyForm) {
                Object.entries(fields).forEach(([key, value]) => {
                    const field = applyForm.querySelector(`input[name="${key}"]`);
                    if (field && value !== undefined && value !== null) {
                        field.value = value;
                        console.log(`Apply Ìèº ${key} ÌïÑÎìúÏóê Í∞í ÏÑ§Ï†ï:`, value);
                    }
                });
            }
        },
        
        checkPreSelectedProduct: () => {
            const params = new URLSearchParams(window.location.search);
            const model = params.get('model');
            const carrier = params.get('carrier');
            const type = params.get('type');
            
            if (model && carrier && type) {
                state.selectedProduct = {
                    model: params.get('model') || '',
                    carrier: params.get('carrier') || '',
                    type: params.get('type') || '',
                    support: params.get('support') || '',
                    principal: params.get('principal') || '',
                    brand: params.get('brand') || '',
                    plan_name: params.get('plan_name') || '',
                    plan_period: params.get('plan_period') || '',
                    plan: params.get('plan') || '',
                    installment: params.get('installment') || '',
                    total: params.get('total') || ''
                };
                
                state.hasPreSelectedProduct = true;
                return true;
            }
            return false;
        }
    };
    
    // üì§ Ìèº Ï†úÏ∂ú Í¥ÄÎ¶¨
    const formSubmit = {
        submitForm: () => {
            setTimeout(() => {
                const summitButton = document.getElementById('summit');
                const applyForm = document.querySelector('form[name="apply"]') || 
                                document.querySelector('form#apply');
                
                if (summitButton) {
                    console.log('Summit Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ');
                    summitButton.click();
                } else if (applyForm) {
                    console.log('Apply Ìèº ÏßÅÏ†ë Ï†úÏ∂ú ÏãúÎèÑ');
                    const submitBtn = applyForm.querySelector('button[type="submit"]') || 
                                    applyForm.querySelector('input[type="submit"]') ||
                                    applyForm.querySelector('#summit');
                    if (submitBtn) {
                        submitBtn.click();
                    } else {
                        // ÏßÅÏ†ë Ìèº Ï†úÏ∂ú
                        const submitEvent = new Event('submit', {
                            bubbles: true,
                            cancelable: true
                        });
                        applyForm.dispatchEvent(submitEvent);
                        
                        if (!submitEvent.defaultPrevented) {
                            applyForm.submit();
                        }
                    }
                } else {
                    console.error('Ìèº ÎòêÎäî Ï†úÏ∂ú Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
                    chatUI.addBotMessage("Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
                }
            }, 300);
        }
    };
    
    // üöÄ Ï¥àÍ∏∞Ìôî
    async function initAIChat() {
        try {
            console.log('ÎÖ∏Ìîº AI ÏÉÅÎã¥ Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
            
            state.chatContainer = document.getElementById('chatbot');
            if (!state.chatContainer) {
                console.error('chatbot Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
                return;
            }
            
            animations.showGreeting();
            
            // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            const [productData, regionData] = await Promise.all([
                fetch(PRODUCTS_DATA_URL).then(res => {
                    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                    return res.json();
                }),
                fetch(REGIONS_DATA_URL).then(res => {
                    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                    return res.json();
                })
            ]);

            state.products = productData;
            // ÏßÄÏó≠ Îç∞Ïù¥ÌÑ∞Îäî Î∞∞Ïó¥Î°ú Ï†úÍ≥µÎêòÎØÄÎ°ú {"ÏÑúÏö∏": [..]} ÌòïÌÉúÏùò ÎßµÏúºÎ°ú Î≥ÄÌôò
            const regionMap = {};
            if (Array.isArray(regionData)) {
                regionData.forEach(r => {
                    if (r && r.name && Array.isArray(r.districts)) {
                        regionMap[r.name] = r.districts;
                    }
                });
            }
            state.regionToCity = regionMap;

            console.log(`ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: ${productData.length}Í∞ú`);
            console.log(`ÏßÄÏó≠ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: ${Object.keys(regionMap).length}Í∞ú ÏãúÎèÑ`);
            
            await animations.showAIThinking("AIÍ∞Ä ÎßûÏ∂§ ÏÉÅÌíàÏùÑ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§");
            
            // URL ÌååÎùºÎØ∏ÌÑ∞ Ï≤¥ÌÅ¨
            if (dataManager.checkPreSelectedProduct()) {
                console.log('ÏÇ¨Ï†Ñ ÏÑ†ÌÉùÎêú ÏÉÅÌíà Î∞úÍ≤¨:', state.selectedProduct);
                chatFlow.showProductInfo(state.selectedProduct);
            } else {
                chatFlow.nextStep();
            }
            
            console.log('ÎÖ∏Ìîº AI ÏÉÅÎã¥ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
            
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
            chatUI.addBotMessage("Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏÑúÎπÑÏä§ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
        }
    }
    
    // Ï†ëÍ∑ºÏÑ± Í∞úÏÑ†
    function improveAccessibility() {
        // ÌÇ§Î≥¥Îìú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏßÄÏõê
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const backBtn = document.querySelector('.chat-back');
                if (backBtn) {
                    backBtn.click();
                }
            }
        });
        
        // Ìè¨Ïª§Ïä§ Í¥ÄÎ¶¨
        const observer = new MutationObserver(() => {
            const newInput = state.chatContainer.querySelector('.chat-input input:last-child, .chat-input select:last-child');
            if (newInput) {
                setTimeout(() => newInput.focus(), 100);
            }
        });
        
        if (state.chatContainer) {
            observer.observe(state.chatContainer, { childList: true, subtree: true });
        }
    }
    
    // ÏóêÎü¨ Ìï∏Îì§ÎßÅ
    function handleError(error, context = '') {
        console.error(`Error in ${context}:`, error);
        
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏπúÌôîÏ†ÅÏù∏ ÏóêÎü¨ Î©îÏãúÏßÄ
        if (context === 'Form submission') {
            chatUI.addBotMessage("Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïã†Ï≤≠ Ï≤òÎ¶¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
        }
    }
    
    // DOM Ï§ÄÎπÑ ÌôïÏù∏ Î∞è Ï¥àÍ∏∞Ìôî
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initAIChat();
            improveAccessibility();
        });
    } else {
        // DOMÏù¥ Ïù¥ÎØ∏ Î°úÎìúÎêú Í≤ΩÏö∞
        initAIChat();
        improveAccessibility();
    }
    
    // Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨
    window.addEventListener('error', (e) => {
        handleError(e.error, 'Global');
    });
    
    // Promise ÏóêÎü¨ Ìï∏Îì§Îü¨
    window.addEventListener('unhandledrejection', (e) => {
        handleError(e.reason, 'Promise');
        e.preventDefault();
    });
    
    // ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
    window.addEventListener('beforeunload', () => {
        // ÌïÑÏöîÌïú Ï†ïÎ¶¨ ÏûëÏóÖ
        dataManager.updateUrlParams();
    });
    
})();
